// <auto-generated />
using System;
using System.Collections;
using AdminApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AdminApi.Migrations
{
    [DbContext(typeof(AdminContext))]
    [Migration("20241205140628_SupportTickets")]
    partial class SupportTickets
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdminApi.Models.Book", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                b.Property<string>("BarCode")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<long>("BookTitleId")
                    .HasColumnType("bigint");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Status")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.HasIndex("BookTitleId");

                b.ToTable("Books");
            });

            modelBuilder.Entity("AdminApi.Models.BookLoan", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                b.Property<long>("BookId")
                    .HasColumnType("bigint");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("ReturnDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("ReturnedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<long>("UserId")
                    .HasColumnType("bigint");

                b.HasKey("Id");

                b.HasIndex("BookId");

                b.ToTable("BookLoans");
            });

            modelBuilder.Entity("AdminApi.Models.BookTitle", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("ISBN")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("BookTitles");
            });

            modelBuilder.Entity("AdminApi.Models.Computer", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Model")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Serial")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("State")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("Computers");
            });

            modelBuilder.Entity("AdminApi.Models.ComputerLoan", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                b.Property<long>("ComputerId")
                    .HasColumnType("bigint");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("ReturnDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("ReturnedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<long>("UserId")
                    .HasColumnType("bigint");

                b.HasKey("Id");

                b.HasIndex("ComputerId");

                b.HasIndex("UserId");

                b.ToTable("ComputerLoans");
            });

            modelBuilder.Entity("AdminApi.Models.Review", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                b.Property<long>("BookTitleId")
                    .HasColumnType("bigint");

                b.Property<string>("Content")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<int>("Rating")
                    .HasColumnType("integer");

                b.Property<long>("UserId")
                    .HasColumnType("bigint");

                b.HasKey("Id");

                b.HasIndex("BookTitleId");

                b.HasIndex("UserId");

                b.ToTable("Reviews");
            });

            modelBuilder.Entity("AdminApi.Models.SupportTicket", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<int>("IssueCategory")
                    .HasColumnType("integer");

                b.Property<long>("JanitorId")
                    .HasColumnType("bigint");

                b.Property<int>("Status")
                    .HasColumnType("integer");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<long>("UserId")
                    .HasColumnType("bigint");

                b.HasKey("Id");

                b.HasIndex("JanitorId");

                b.HasIndex("UserId");

                b.ToTable("SupportTickets");
            });

            modelBuilder.Entity("AdminApi.Models.User", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("PasswordHash")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("PersonNumber")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("PhoneNumber")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<BitArray>("Roles")
                    .IsRequired()
                    .HasColumnType("bit varying");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("Users");
            });

            modelBuilder.Entity("AdminApi.Models.Book", b =>
            {
                b.HasOne("AdminApi.Models.BookTitle", "BookTitle")
                    .WithMany("Books")
                    .HasForeignKey("BookTitleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("BookTitle");
            });

            modelBuilder.Entity("AdminApi.Models.BookLoan", b =>
            {
                b.HasOne("AdminApi.Models.Book", "Book")
                    .WithMany("BookLoans")
                    .HasForeignKey("BookId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("AdminApi.Models.User", "User")
                    .WithMany("BookLoans")
                    .HasForeignKey("BookId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Book");

                b.Navigation("User");
            });

            modelBuilder.Entity("AdminApi.Models.ComputerLoan", b =>
            {
                b.HasOne("AdminApi.Models.Computer", "Computer")
                    .WithMany("ComputerLoans")
                    .HasForeignKey("ComputerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("AdminApi.Models.User", "User")
                    .WithMany("ComputerLoans")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Computer");

                b.Navigation("User");
            });

            modelBuilder.Entity("AdminApi.Models.Review", b =>
            {
                b.HasOne("AdminApi.Models.BookTitle", "BookTitle")
                    .WithMany("Reviews")
                    .HasForeignKey("BookTitleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("AdminApi.Models.User", "User")
                    .WithMany("Reviews")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("BookTitle");

                b.Navigation("User");
            });

            modelBuilder.Entity("AdminApi.Models.SupportTicket", b =>
            {
                b.HasOne("AdminApi.Models.User", "Janitor")
                    .WithMany()
                    .HasForeignKey("JanitorId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("AdminApi.Models.User", "User")
                    .WithMany("SupportTickets")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.Navigation("Janitor");

                b.Navigation("User");
            });

            modelBuilder.Entity("AdminApi.Models.Book", b =>
            {
                b.Navigation("BookLoans");
            });

            modelBuilder.Entity("AdminApi.Models.BookTitle", b =>
            {
                b.Navigation("Books");

                b.Navigation("Reviews");
            });

            modelBuilder.Entity("AdminApi.Models.Computer", b =>
            {
                b.Navigation("ComputerLoans");
            });

            modelBuilder.Entity("AdminApi.Models.User", b =>
            {
                b.Navigation("BookLoans");

                b.Navigation("ComputerLoans");

                b.Navigation("Reviews");

                b.Navigation("SupportTickets");
            });
#pragma warning restore 612, 618
        }
    }
}
